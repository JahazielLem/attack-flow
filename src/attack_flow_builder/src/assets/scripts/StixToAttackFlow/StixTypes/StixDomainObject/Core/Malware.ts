import type { KillChainPhase } from "../../StixCommonDataTypes";
import type { BaseStixDomainObject } from "../StixDomainObjectBase";

/**
 * STIX 2.1 Malware.
 */
export interface Malware extends BaseStixDomainObject<"malware"> {

    /**
     * A name used to identify the malware instance or family, as specified by
     * the producer of the SDO. For a malware family the name MUST be defined.
     * If a name for a malware instance is not available, the SHA-256 hash value
     * or sampleâ€™s filename MAY be used instead.
     */
    name?: string;

    /**
     * A description that provides more details and context about the malware
     * instance or family, potentially including its purpose and its key
     * characteristics.
     */
    description?: string;

    /**
     * A set of categorizations for the malware being described.
     * 
     * The values for this property SHOULD come from the malware-type-ov open
     * vocabulary.
     */
    malware_types?: string[];

    /**
     * Whether the object represents a malware family (if true) or a malware
     * instance (if false).
     */
    is_family: boolean;

    /**
     * Alternative names used to identify this malware or malware family.
     */
    aliases?: string[];

    /**
     * The list of Kill Chain Phases for which this malware can be used.
     */
    kill_chain_phases?: KillChainPhase[]

    /**
     * The time that the malware instance or family was first seen.
     * 
     * This property is a summary property of data from sightings and other data
     * that may or may not be available in STIX. If new sightings are received
     * that are earlier than the first seen timestamp, the object may be updated
     * to account for the new data.
     */
    first_seen?: string;

    /**
     * The time that the malware family or malware instance was last seen.
     * 
     * This property is a summary property of data from sightings and other data
     * that may or may not be available in STIX. If new sightings are received
     * that are later than the last_seen timestamp, the object may be updated to
     * account for the new data.
     * 
     * If this property and the first_seen property are both defined, then this
     * property MUST be greater than or equal to the timestamp in the first_seen
     * property.
     */
    last_seen?: string;

    /**
     * The operating systems that the malware family or malware instance is
     * executable on. This applies to virtualized operating systems as well as
     * those running on bare metal.
     * 
     * The value of this property MUST be the identifier for a SCO software
     * object.
     */
    operating_system_refs?: string[];

    /**
     * The processor architectures (e.g., x86, ARM, etc.) that the malware
     * instance or family is executable on.
     * 
     * The values for this property SHOULD come from the
     * processor-architecture-ov open vocabulary.
     */
    architecture_execution_envs?: string[];

    /**
     * The programming language(s) used to implement the malware instance or
     * family.
     * 
     * The values for this property SHOULD come from the
     * implementation-language-ov open vocabulary.
     */
    implementation_languages?: string[];

    /**
     * Any of the capabilities identified for the malware instance or family.
     * 
     * The values for this property SHOULD come from the malware-capabilities-ov
     * open vocabulary.
     */
    capabilities?: string[];

    /**
     * The sample_refs property specifies a list of identifiers of the SCO file
     * or artifact objects associated with this malware instance(s) or family.
     * 
     * If is_family is false, then all samples listed in sample_refs MUST refer
     * to the same binary data.
     */
    sample_refs?: string[];

}
