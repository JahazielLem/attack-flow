///////////////////////////////////////////////////////////////////////////////
//  1. Context Menu  //////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////


export enum MenuType {
    Item    = 0,
    Toggle  = 1,
    Submenu = 2
}

export type ContextMenu<T>
    = ContextMenuItem<T>
    | ContextMenuToggleItem<T>
    | ContextMenuSubmenu<T>;


///////////////////////////////////////////////////////////////////////////////
//  2. Generic Context Menu  //////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////


interface ContextMenuBase<T> {
    type: T;
    text: string;
    disabled?: boolean;
}


///////////////////////////////////////////////////////////////////////////////
//  3. Context Menu Section  //////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////


export interface ContextMenuSection<D> {
    id: string;
    items: ContextMenu<D>[];
}


///////////////////////////////////////////////////////////////////////////////
//  4. Context Menu Types  ////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////


export interface ContextMenuItem<D> extends ContextMenuBase<MenuType.Item> {
    data: D;
    shortcut?: string;
    keepMenuOpenOnSelect?: boolean;
}

export interface ContextMenuToggleItem<D> extends ContextMenuBase<MenuType.Toggle> {
    data: D;
    value: boolean;
    shortcuts?: string[];
    keepMenuOpenOnSelect?: boolean;
}

export interface ContextMenuSubmenu<D> extends ContextMenuBase<MenuType.Submenu> {
    sections : ContextMenuSection<D>[];
}
